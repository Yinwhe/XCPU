`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date:    21:34:44 03/12/2012
// Design Name:
// Module Name:    REGS ID/EX Latch
// Project Name:
// Target Devices:
// Tool versions:
// Description:
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
//////////////////////////////////////////////////////////////////////////////////

module    REG_ID_EX(input clk,                                         //ID/EX Latch
                    input rst,
                    input EN,                                          //æµ?æ°´å??å­??¨ä½¿ï¿??
                    input flush,                                       //?°æ??ç«?äº?æ¸??¤å¹¶ç­?å¾?ï¼?DStall
                    input [31:0] IR_ID,                                //å½???è¯?????ä»?(æµ?è¯?)
                    input [31:0] PCurrent_ID,                          //å½???è¯?????ä»¤å???¨å?¨æ??ï¿??
                    input [4:0] rs1_addr,                               //å½?????ä»¤è?»å?ºå??å­???A?°å??
                    input [4:0] rs2_addr,                               //å½?????ä»¤è?»å?ºå??å­???B?°å??
                    input [31:0] rs1_data,                             //å½?????ä»¤è?»å?ºå??å­???A?°æ??
                    input [31:0] rs2_data,                             //å½?????ä»¤è?»å?ºå??å­???A?°æ??
                    input [31:0] Imm32,                                //å½?????ä»¤è?»å?ºå¹¶?©ï¿½?32ä½?ç«??³æ?°ï¿½?
                    input [4:0]  rd_addr,                              //å½?????ä»¤è?»å?ºç??????ä½??°å?°ï¿½?
                    input ALUSrc_A,                             //å½?????ä»¤è????ï¼?ALU A?????§å??
                    input ALUSrc_B,                             //å½?????ä»¤è????ï¼?ALU B?????§å??
                    input [3:0]  ALUC,                                 //å½?????ä»¤è????ï¼?ALU??ä½??§å??
                    input DatatoReg,                            //å½?????ä»¤è????ï¼?REG???°æ??ï¿??ï¿½é??????
                    input RegWrite,                                    //å½?????ä»¤è????ï¼?å¯?å­??¨å??ä¿¡ï¿½?
                    input WR,                                          //å½?????ä»¤è????ï¼?å­??¨å?¨è?»å??ä¿¡å??
                    input [2:0] u_b_h_w,
                    input MIO,

                    output reg[31:0] PCurrent_EX,                      //??å­?å½???è¯?????ä»¤å?°å??
                    output reg[31:0] IR_EX,                            //??å­?å½???è¯?????ä»?(æµ?è¯?)
                    output reg[4:0]  rs1_EX,
                    output reg[4:0]  rs2_EX,
                    output reg[31:0] A_EX,                             //??å­?å½???è¯?????ä»¤è?»å?ºå??å­???A?°æ??
                    output reg[31:0] B_EX,                             //??å­?å½???è¯?????ä»¤è?»å?ºå??å­???B?°æ??
                    output reg[31:0] Imm32_EX,                          //??å­?å½???è¯?????ä»?32ä½?ç«??³æ?°ï¿½?
                    output reg[4:0]  rd_EX,                            //??å­?å½???è¯?????ä»¤å??????å¯?å­??¨å?°å??
                    output reg       ALUSrc_A_EX,                      //??å­?å½???è¯?????ä»?ALU A?????§å??
                    output reg       ALUSrc_B_EX,                      //??å­?å½???è¯?????ä»?ALU B?????§å??(ä¿???)
                    output reg[3:0]  ALUC_EX,                          //??å­?å½???è¯?????ä»?ALU??ä½????½æ?§å??
                    output reg       DatatoReg_EX,                     //??å­?å½???è¯?????ä»?REG???°æ??ï¿??ï¿½é??????
                    output reg       RegWrite_EX,                      //??å­?å½???è¯?????ä»¤å??å­??¨å??ä¿¡å??
                    output reg       WR_EX,                            //??å­?å½???è¯?????ä»¤å???¨å?¨è?»å??ä¿¡ï¿½?
                    output reg[2:0]  u_b_h_w_EX,
                    output reg       MIO_EX
                );

    always @(posedge clk or posedge rst) begin                           //ID/EX Latch
    if(rst) begin
        rd_EX        <= 0;
        RegWrite_EX  <= 0;
        WR_EX        <= 0;
        IR_EX        <= 32'h00000000;
        PCurrent_EX  <= 32'h00000000 ;
        rs1_EX       <= 0;
        rs2_EX       <= 0;
        MIO_EX       <= 0;
    end
    else if(EN)begin
            if(flush)begin                               //?°æ???²ç???¶å?²å?·æ?æ°´çº¿ç¦?æ­¢æ?¹å??CPU?¶ï¿½??
                IR_EX       <= 32'h00000000;             //nop,åº?å¼?å½??????? : ????32'h00000013
                rd_EX       <= 0;                        //cancel Instruction write address
                RegWrite_EX <= 0;                        //å¯?å­??¨å??ä¿¡å?·ï?ç¦?æ­¢å??å­???ï¿??
                WR_EX       <= 0;                        //cancel write memory
                PCurrent_EX <= PCurrent_ID;              //ä¼?ï¿??ï¿?PC(æµ?è¯?)
                MIO_EX       <= 0;
            end
            else begin                                   //???°æ???²ç??æ­£å¸¸ä¼?è¾???EXï¿??
                PCurrent_EX <= PCurrent_ID;              //ä¼?ï¿??ï¿½å?????ä»¤å?°ï¿½?
                IR_EX       <= IR_ID;                    //ä¼?ï¿??ï¿½å?????ä»¤å?°ï¿½?(æµ?è¯?)
                A_EX        <= rs1_data;                 //ä¼?ï¿??ï¿½å??å­???Aè¯»å?ºæ?°æ??
                B_EX        <= rs2_data;                 //ä¼?ï¿??ï¿½å??å­???Bè¯»å?ºæ?°æ??
                Imm32_EX    <= Imm32;                    //ä¼?ï¿??ï¿½æ?©å???ç«??³ï¿½?
                rd_EX       <= rd_addr;                  //ä¼?ï¿??ï¿½å??????å¯?å­??¨å?°ï¿½?
                rs1_EX      <= rs1_addr;
                rs2_EX      <= rs2_addr;
                ALUSrc_A_EX <= ALUSrc_A;                 //ä¼?ï¿??ï¿?ALU A?????§å?¶ä¿¡??
                ALUSrc_B_EX <= ALUSrc_B;                 //ä¼?ï¿??ï¿?ALU B?????§å?¶ä¿¡??
                ALUC_EX     <= ALUC;                     //ä¼?ï¿??ï¿?ALU??ä½????½æ?§å?¶ä¿¡??
                DatatoReg_EX<= DatatoReg;               //ä¼?ï¿??ï¿?REG???°æ??ï¿??ï¿½é??????
                RegWrite_EX <= RegWrite;                 //ä¼?ï¿??ï¿½å??å­??¨å??ä¿¡ï¿½?
                WR_EX       <= WR;                       //ä¼?ï¿??ï¿½å???¨å?¨è?»å??ä¿¡å??
                u_b_h_w_EX    <= u_b_h_w;
                MIO_EX       <= MIO;

                end
        end
    end

endmodule